# 📚 Development

---

- GyroSI Baby ML: Structure
    
    This chapter describes the on-disk layout that guarantees every `import` statement and file reference in the implementation guides resolves unambiguously. The structure reflects the five recursive G-systems, their CS → UNA → ONA → BU_In → BU_En cycle, the five canonical memory types, and the shared constants, errors, and configuration declared by G6.
    
    > Guide principle
    > 
    > 
    > The code base is intended to compile and run without path adjustments. All directories, module names, and data folders mentioned in the normative text therefore exist exactly as written here.
    > 
    
    ---
    
    ### A. Top-Level Layout
    
    ```
    gyro_si/                # Root Python package (installable)
    │
    ├── audit/              # Observer trace batches, CIDs, forensic artefacts
    ├── benchmarks/         # Micro-benchmarks and performance harnesses
    ├── data/               # Static canonical data sets
    ├── docs/               # Sphinx or MkDocs source, including this guide
    ├── patterns/           # Canonical tensor templates
    │   └── gyro_g1/
    │       └── v1/         # Schema version folders (v2, v3 … added as needed)
    ├── scripts/            # Dev utilities, entry points, database migration helpers
    ├── transitions/        # Stage transition lookup tables
    │   └── gyro_g1/
    │       └── v1/
    ├── tests/              # Pytest suite (fully enumerated in section G)
    │
    ├── .dvc/               # Data-version-control metadata
    ├── .gitignore
    ├── dvc.yaml
    ├── pyproject.toml
    └── README.md
    
    ```
    
    *Rationale*
    
    The root segregates source (`gyro_si/`) from artefacts, versioned data, documentation, and quality-control assets. Continuous integration jobs verify that every sub-package respects the unidirectional dependency flow CS → UNA → ONA → BU.
    
    ---
    
    ### B. Core Source Package `gyro_si/`
    
    ```
    gyro_si/
    │
    ├── __init__.py
    │
    ├── gyro_constants.py          # Canonical constants and derived horizons
    ├── gyro_errors.py             # Taxonomy rooted in GyroError
    ├── gyro_comm.py               # send_message, subscribe, transport glue
    │
    ├── gyro_gcr/                  # GyroCardioRespiratory integration layer
    │   ├── __init__.py
    │   └── gyro_config.py
    │
    ├── g1_gyroalignment/
    ├── g2_gyroinformation/
    ├── g3_gyroinference/
    ├── g4_gyrointelligence_in/
    ├── g5_gyrointelligence_en/
    └── g6_gyrocirculation/        # Shared runners not covered by the four files above
    
    ```
    
    *Notes*
    
    - `gyro_constants.py`, `gyro_errors.py`, and `gyro_comm.py` sit at the same depth as the G-packages, ensuring that any file inside the tree can import them without relative paths.
    - `gyro_gcr/gyro_config.py` hosts the mutable feature toggles referenced throughout section A.5 of the normative guide.
    - `g6_gyrocirculation/` exists for future shared mechanisms or reference runners that belong to G6 but are not already captured in the four canonical modules.
    
    ---
    
    ### C. Universal G-Package Layout
    
    Each G-system is a namespace package with an identical internal lattice that mirrors the five VSM stages. Example shown for G5.
    
    ```
    g5_gyrointelligence_en/
    │
    ├── __init__.py
    ├── runner.py                 # Top-level asyncio entry loop
    │
    ├── cs/
    │   └── g1_governance.py      # Governance Traceability
    ├── una/
    │   └── g2_governance.py      # Information Variety
    ├── ona/
    │   └── g3_governance.py      # Inference Accountability
    ├── bu_in/
    │   └── g4_governance.py      # Policy integration (Lgyr)
    ├── bu_en/
    │   └── synthesis.py          # Policy generation (Rgyr)
    │
    ├── patterns/
    │   └── .gitkeep
    ├── transitions/
    │   └── .gitkeep
    └── immunity_memory.py        # Memory module unique to G5
    
    ```
    
    Identical sub-trees appear in `g1_`, `g2_`, `g3_`, and `g4_`, each with their own memory module:
    
    | G-package | Memory file |
    | --- | --- |
    | `g1_gyroalignment/` | `genetic_memory.py` |
    | `g2_gyroinformation/` | `epigenetic_memory.py` |
    | `g3_gyroinference/` | `structural_memory.py` |
    | `g4_gyrointelligence_in/` | `somatic_memory.py` |
    | `g5_gyrointelligence_en/` | `immunity_memory.py` |
    
    ### Stage-Specific Reference Files
    
    Some guides cite filenames outside the generic “governance” modules. They are included verbatim to preserve import statements.
    
    | Guide fragment | Path in tree |
    | --- | --- |
    | `g1_gyroalignment/cs/identity.py` | `gyro_si/g1_gyroalignment/cs/identity.py` |
    | `g1_gyroalignment/gyro_tensor.py` | `gyro_si/g1_gyroalignment/gyro_tensor.py` |
    | `g1_gyroalignment/bu_en/g5_governance.py` | `gyro_si/g1_gyroalignment/bu_en/g5_governance.py` |
    | `g2_gyroinformation/runner.py` | `gyro_si/g2_gyroinformation/runner.py` |
    | `g4_gyrointelligence_in/bu_in/integration.py` | `gyro_si/g4_gyrointelligence_in/bu_in/integration.py` |
    
    ---
    
    ### D. Canonical Data Directories
    
    Two directories hold all versioned, machine-readable data required by the normative specification.
    
    | Purpose | Directory example | Version policy |
    | --- | --- | --- |
    | Stage templates (identity, CSR layout) | `patterns/gyro_g1/v1/…` | Semantic schema version sub-dir |
    | Transition tables | `transitions/gyro_g1/v1/…` | Same versioning convention |
    
    Additional versions (`v2`, `v3`, …) are added in sibling folders when the schema evolves, never by overwriting earlier data.
    
    ---
    
    ### E. Test Suite and Quality Gates
    
    The `tests/` folder contains one file per normative guarantee.
    
    | Test file | Primary assertion (see A.5.7) |
    | --- | --- |
    | `test_bootstrap.py` | Actors exit the 30 s gating loop |
    | `test_transactions.py` | State after abort equals snapshot |
    | `test_recovery.py` | Closed breaker triggers reset |
    | `test_entropy_chain.py` | `entropy_id` round-trips intact |
    | `test_crypto_evolution.py` | Three-term formula respected |
    
    Continuous integration runs `pytest -q` once with entropy and crypto disabled, then again with both enabled.
    
    ---
    
    ### F. Dependency Boundaries
    
    Static analysis enforces the rule “inner stages never import outward”. Concretely, each G-package depends on:
    
    ```
    cs/     ↦ no internal imports except top-level shared modules
    una/    ↦ cs/ only
    ona/    ↦ una/, cs/
    bu_in/  ↦ ona/, una/, cs/
    bu_en/  ↦ bu_in/, ona/, una/, cs/
    
    ```
    
    A simple script in `scripts/lint_architecture.py` walks the AST and flags violations.
    
    ---
    
    ### G. Optional Components
    
    | Folder | Description |
    | --- | --- |
    | `benchmarks/` | `pytest-bench` harnesses for quantization and tensor evolution |
    | `audit/` | Accumulating `observer_trace.jl` batches with Blake3 CIDs |
    | `data/` | Public domain corpora or canned traces used in integration tests |
    | `.dvc/` | Version tracking for large files referenced by `dvc.yaml` |
    
    These folders remain empty on first checkout, guarded by `.gitkeep` when needed.
    
    ---
    
    ### H. Installation and Entry Points
    
    `pyproject.toml` declares `gyro-si` as the console entry point bound to `g6_gyrocirculation.runner:cli`. Optional extras, such as GPU support and the Flet UI, appear under `[project.optional-dependencies]`.
    
    ---
    
    ### I. Summary
    
    The tree above contains every module, data file, and test referenced by the normative implementation guides. All imports are absolute and resolvable. Versioned templates, transition tables, and memory modules live in predictable locations, while stage folders replicate consistently across the five G-packages. Continuous integration enforces stage boundaries, executes the full regression suite, and verifies that the project remains installable as a single package.
    
- GyroSI Baby ML: Boilerplate
    
    {# ====================================================================== #}
    {#  Jinja2 template for every G1 stage module                             #}
    {#  ────────────────────────────────────────────────────────────────────  #}
    {#  Render variables expected from the YAML / JSON descriptor             #}
    {#                                                                       #}
    {#  ─ required ─                                                         #}
    {#    STAGE_NAME_CAMEL       e.g. "UNANormalization"                     #}
    {#    STAGE_NAME_UPPER       e.g. "UNA"                                  #}
    {#    FILE_DOCSTRING         High-level description string               #}
    {#    SHAPE_TUPLE            e.g. (3, 2)                                 #}
    {#    NONZEROS_INT           e.g. 6                                      #}
    {#    CLASS_DESCRIPTION      One-line summary inside the class           #}
    {#    CANONICAL_PATTERN_STR  repr() of dense ndarray OR "None"           #}
    {#                                                                   ▼   #}
    {#  ─ optional (set to None / empty if unused) ─                         #}
    {#    EXTRA_CONSTANTS_BLOCK      # custom constant defs                  #}
    {#    EXTRA_INIT_STATE           # additional **init** assignments       #}
    {#    EXTRA_INIT_CSR_CODE        # custom CSR build steps                #}
    {#    EXTRA_VALIDATE_CODE        # any extra structural checks           #}
    {#    EXTRA_PHASE_CODE           # extra per-phi processing (fixed-pt)   #}
    {#    EXTRA_TRANSITION_PAYLOAD   # extra entries in prepare_transition   #}
    {# ====================================================================== #}
    
    """
    G1 {{ STAGE_NAME_UPPER }} Stage: {{ FILE_DOCSTRING }}
    """
    
    # ───────────────────── imports & shared infrastructure ──────────────────
    
    import numpy as np
    import logging
    import time
    import hashlib
    import threading
    import os
    from typing import Dict, Any, List, Tuple
    from contextlib import asynccontextmanager
    from scipy.sparse import csr_matrix
    from collections import deque
    
    from gyro_si.gyro_constants      import ALPHA, BETA, GAMMA, M_P, HALF_HORIZON
    from gyro_si.gyro_errors         import StructuralViolation, QuantizationDefect
    from gyro_si.gyro_comm           import send_message
    from gyro_si.gyro_gcr.gyro_config import config
    
    # shared trace-buffer from CS
    
    from gyro_si.g1_gyroalignment.cs.identity import trace_buffer, trace_lock, stage_transition_lock
    
    logger = logging.getLogger(**name**)
    
    SCHEMA_VERSION = "v1"
    TEMPLATE_PATH  = os.path.join("patterns", "gyro_g1", SCHEMA_VERSION)
    
    {# -------- optional, stage-specific constants ------------------------ #}
    {{ EXTRA_CONSTANTS_BLOCK or "" }}
    
    # ─────────────────────────── class definition ───────────────────────────
    
    class {{ STAGE_NAME_CAMEL }}:
    """{{ CLASS_DESCRIPTION }}"""
    
    ```
    SHAPE     : Tuple[int, ...] = {{ SHAPE_TUPLE }}
    NONZEROS  : int             = {{ NONZEROS_INT }}
    
    {# canonical pattern can be None for stages whose dense form is computed, e.g. ONA anti-correlation #}
    CANONICAL_PATTERN = {{ CANONICAL_PATTERN_STR }}
    
    # ───────── constructor ─────────
    def __init__(self, state: Dict[str, Any]):
        """Initialize {{ STAGE_NAME_UPPER }} from previous stage state."""
    
        # per-tensor re-entrant lock
        self.lock = threading.RLock()
    
        # ══ identity & lineage ══
        self.tensor_id       = state["tensor_id"]
        self.parent_id       = state.get("parent_id")
        self.stage           = "{{ STAGE_NAME_UPPER }}"
        self.cycle_index     = state["cycle_index"]
    
        # ══ phase-tracking (Q29.34 fixed-point) ══
        self.amplitude        = state["amplitude"]
        self.cumulative_phase = state["cumulative_phase"]
        self.chirality_phase  = state["chirality_phase"]
        self.last_epsilon     = state["last_epsilon"]
    
        # ══ lineage ══
        self.birth_phase    = state["birth_phase"]
        self.creation_cycle = state["creation_cycle"]
    
        # ───────── stage-specific incoming arrays / metadata ─────────
        {% raw -%}
        # (Populate from state[...] in generator script if needed)
        {%- endraw %}
    
        # any extra init (templated)
        {{ EXTRA_INIT_STATE or "" }}
    
        # ───────── build CSR structure ─────────
        self._initialize_csr()
    
        # checksum & template validation
        self.state_checksum = self._compute_checksum()
        self._validate_against_template()
    
        self._record_to_trace("{{ STAGE_NAME_UPPER|lower }}_initialized",
                              shape=self.SHAPE,
                              nonzeros=self.NONZEROS,
                              checksum=self.state_checksum)
    
    # ─────────────────────── helper: fixed-point ────────────────────────
    @staticmethod
    def _to_fixed_point(value: float) -> int:
        return int(value * (2**34))
    
    @staticmethod
    def _from_fixed_point(fx: int) -> float:
        return fx / (2**34)
    
    # ─────────────────────── CSR construction ───────────────────────────
    def _initialize_csr(self) -> None:
        """Build the stage-specific CSR representation."""
        if self.CANONICAL_PATTERN is not None:
            dense = np.array(self.CANONICAL_PATTERN, dtype=np.int8)
        else:
            # generator script must fill EXTRA_INIT_CSR_CODE for computed patterns
            dense = None
    
        {{ EXTRA_INIT_CSR_CODE or "" }}
    
        if dense is not None:
            csr = csr_matrix(dense)
            self.indptr  = csr.indptr.tolist()
            self.indices = csr.indices.tolist()
            self.data    = [0b01 if v == 1 else 0b11 for v in csr.data]
    
        self._validate_structure()
    
    # ─────────────────────── validation & checksum ──────────────────────
    def _compute_checksum(self) -> str:
        h = hashlib.sha256()
        for item in (
            self.tensor_id, self.stage, self.indptr, self.indices, self.data,
            self.amplitude, self.cumulative_phase, self.chirality_phase
        ):
            h.update(str(item).encode())
        return h.hexdigest()
    
    def _validate_against_template(self) -> None:
        tpl_file = os.path.join(TEMPLATE_PATH, "{{ STAGE_NAME_UPPER|lower }}_template.npy")
        if not os.path.exists(tpl_file):
            logger.warning("Template %s missing; skipping validation.", tpl_file)
            return
        tpl = np.load(tpl_file)
        tpl_csr = csr_matrix(tpl)
        if [self.indptr, self.indices, self.data] != \\
           [tpl_csr.indptr.tolist(),
            tpl_csr.indices.tolist(),
            [0b01 if v == 1 else 0b11 for v in tpl_csr.data]]:
            raise StructuralViolation(f"{ self.stage } deviates from canonical template")
    
    def _validate_structure(self) -> None:
        """Common invariants + stage-specific checks."""
        if len(self.data) != self.NONZEROS:
            raise StructuralViolation(f"{ self.stage } expects {self.NONZEROS} non-zeros")
    
        {{ EXTRA_VALIDATE_CODE or "" }}
    
    # ───────────────────── phase / processing hooks ─────────────────────
    def process_phase(self, phi: float) -> float:
        """Generic φ-processing wrapper; stage-specific policy inserted via template."""
        # convert → fixed-point
        phi_fx       = self._to_fixed_point(phi)
        m_p_fx       = self._to_fixed_point(M_P)
        half_m_p_fx  = m_p_fx // 2
    
        # quantize
        phi_q_fx     = (
            -m_p_fx if phi_fx < -half_m_p_fx else
             m_p_fx if phi_fx >= half_m_p_fx else 0
        )
        eps_fx       = phi_fx - phi_q_fx
    
        # amplitude & phase counters
        self.amplitude        = np.clip(self.amplitude + phi_q_fx,
                                        -m_p_fx, m_p_fx)
        abs_phi_q_fx          = abs(phi_q_fx)
        four_pi_fx            = self._to_fixed_point(4 * np.pi)
        two_pi_fx             = self._to_fixed_point(2 * np.pi)
        self.cumulative_phase = (self.cumulative_phase + abs_phi_q_fx) % four_pi_fx
        self.chirality_phase  = self.cumulative_phase % two_pi_fx
        self.last_epsilon     = eps_fx
    
        # stage-specific extra behaviour (optional)
        {{ EXTRA_PHASE_CODE or "" }}
    
        # logging
        self._record_to_trace("phase_processed",
                              phi=phi,
                              phi_q=self._from_fixed_point(phi_q_fx),
                              epsilon=self._from_fixed_point(eps_fx))
    
        return self._from_fixed_point(eps_fx)
    
    # ─────────────────── transition payload builder ─────────────────────
    def prepare_transition(self) -> Dict[str, Any]:
        """Return dict to feed next stage ctor."""
        with self.lock, stage_transition_lock:
            self._validate_structure()
            payload: Dict[str, Any] = {
                "tensor_id"       : self.tensor_id,
                "parent_id"       : self.parent_id,
                "cycle_index"     : self.cycle_index + 1,
                "amplitude"       : self.amplitude,
                "cumulative_phase": self.cumulative_phase,
                "chirality_phase" : self.chirality_phase,
                "last_epsilon"    : self.last_epsilon,
                "birth_phase"     : self.birth_phase,
                "creation_cycle"  : self.creation_cycle,
                # structural hand-off
                "{{ STAGE_NAME_UPPER|lower }}_indptr" : self.indptr.copy(),
                "{{ STAGE_NAME_UPPER|lower }}_indices": self.indices.copy(),
                "{{ STAGE_NAME_UPPER|lower }}_data"   : self.data.copy(),
            }
            # insert any extra items required by the next stage
            {{ EXTRA_TRANSITION_PAYLOAD or "" }}
    
            self.state_checksum = self._compute_checksum()
            self._record_to_trace("{{ STAGE_NAME_UPPER|lower }}_transition_prepared",
                                  checksum=self.state_checksum)
            return payload
    
    # ───────────────────────── trace helper ─────────────────────────────
    def _record_to_trace(self, event_type: str, **kw):
        evt = dict(timestamp=time.time(),
                   source=f"G1_{{ STAGE_NAME_UPPER }}",
                   event_type=event_type,
                   tensor_id=self.tensor_id,
                   cycle_index=self.cycle_index,
                   stage=self.stage,
                   **kw)
        logger.debug("%s Event: %s", self.stage, evt)
        with trace_lock:
            trace_buffer.append(evt)
    
    ```
    

---

- GyroSI Baby ML: Plan
    
    This plan organizes implementation into six primary phases. The hierarchy ensures that foundational components are built before systems that depend on them, supporting a stable, layered development process.
    
    ---
    
    ### **Phase 1: The Foundation (Core Setup & G6 Primitives)**
    
    **Goal:** Establish the system-wide bedrock required for all subsequent modules.
    
    **Rationale:** Constants, error taxonomy, and the core communication schema must precede any dependent development.
    
    - **Batch 1.1: Canonical Definitions**
        - `gyro_si/gyro_constants.py`
        - `gyro_si/gyro_errors.py`
        - `gyro_si/gyro_comm.py`
    - **Batch 1.2: System Configuration & Project Setup**
        - `gyro_si/gyro_gcr/gyro_config.py`
        - `pyproject.toml`
        - `.gitignore`
        - `dvc.yaml`
        - `README.md`
    - **Batch 1.3: Initial Test Stubs**
        - `tests/unit/test_bootstrap.py`
        - `tests/unit/test_transactions.py`
        - `tests/unit/test_recovery.py`
        - `tests/unit/test_entropy_chain.py`
        - `tests/unit/test_crypto_evolution.py`
    
    **Milestone:** The project installs and basic core interfaces are defined and importable.
    
    ---
    
    ### **Phase 2: The Core Engine (G1 GyroAlignment)**
    
    **Goal:** Implement the primary operational unit: the tensor.
    
    **Rationale:** G1 forms the essential computational substrate. All higher levels are ultimately built on top of this core.
    
    - **Batch 2.1: GyroTensor Object Definition**
        - `gyro_si/g1_gyroalignment/gyro_tensor.py`
    - **Batch 2.2: Stage Logic Implementation**
        - `gyro_si/g1_gyroalignment/cs/g1_governance.py`
        - `gyro_si/g1_gyroalignment/una/g2_governance.py`
        - `gyro_si/g1_gyroalignment/ona/g3_governance.py`
        - `gyro_si/g1_gyroalignment/bu_in/g4_governance.py`
        - `gyro_si/g1_gyroalignment/bu_en/g5_governance.py`
    - **Batch 2.3: Genetic Memory & The Runner**
        - `gyro_si/g1_gyroalignment/genetic_memory.py`
        - `gyro_si/g1_gyroalignment/runner.py`
    
    **Milestone:** A `GyroTensor` instance can be instantiated and driven through its full stage lifecycle, with state transitions logged to genetic memory.
    
    ---
    
    ### **Phase 3: The Information Coordinator (G2 GyroInformation)**
    
    **Goal:** Implement the system's information routing and lexicon management.
    
    **Rationale:** G2 is responsible for coordination between raw tensor operations and higher system functions.
    
    - **Batch 3.1: Lexicon & Memory**
        - `gyro_si/g2_gyroinformation/epigenetic_memory.py`
        - `gyro_si/g2_gyroinformation/cs/g1_governance.py`
        - `gyro_si/g2_gyroinformation/una/g2_governance.py`
        - `gyro_si/g2_gyroinformation/ona/g3_governance.py`
        - `gyro_si/g2_gyroinformation/bu_in/g4_governance.py`
        - `gyro_si/g2_gyroinformation/bu_en/synthesis.py`
    - **Batch 3.2: Runner**
        - `gyro_si/g2_gyroinformation/runner.py`
    
    **Milestone:** G2 can receive a message (e.g., token list), map to internal phi values, and update its epigenetic memory.
    
    ---
    
    ### **Phase 4: The Interactive Interface (G3 GyroInference)**
    
    **Goal:** Build the user-facing, interactive inference layer.
    
    **Rationale:** G3 exposes the system as a tangible ML application, leveraging G1 and G2 for actual computation.
    
    - **Batch 4.1: Stage Modules**
        - `gyro_si/g3_gyroinference/cs/g1_governance.py`
        - `gyro_si/g3_gyroinference/una/g2_governance.py`
        - `gyro_si/g3_gyroinference/ona/g3_governance.py`
        - `gyro_si/g3_gyroinference/bu_in/g4_governance.py`
        - `gyro_si/g3_gyroinference/bu_en/synthesis.py`
        - `gyro_si/g3_gyroinference/structural_memory.py`
        - *(If a UI is present, its path and assets directory should be specified separately, e.g., `gyro_si/g3_gyroinference/ona/interface/` and `assets/`, if those exist)*
    - **Batch 4.2: Runner**
        - `gyro_si/g3_gyroinference/runner.py`
    
    **Milestone:** The system can be run interactively, with user input routed through G3 and observable inference outputs.
    
    ---
    
    ### **Phase 5: The Strategic Observer (G4 GyroIntelligence Ingress)**
    
    **Goal:** Enable the system to observe itself and assess performance.
    
    **Rationale:** G4 delivers reflexivity and performance analytics to the architecture.
    
    - **Batch 5.1: Analytics & Observation**
        - `gyro_si/g4_gyrointelligence_in/cs/g1_governance.py`
        - `gyro_si/g4_gyrointelligence_in/una/g2_governance.py`
        - `gyro_si/g4_gyrointelligence_in/ona/g3_governance.py`
        - `gyro_si/g4_gyrointelligence_in/bu_in/g4_governance.py`
        - `gyro_si/g4_gyrointelligence_in/bu_en/synthesis.py`
        - `gyro_si/g4_gyrointelligence_in/somatic_memory.py`
    - **Batch 5.2: Runner**
        - `gyro_si/g4_gyrointelligence_in/runner.py`
    
    **Milestone:** G4 can process events from G1–G3 and synthesize advisory proposals.
    
    ---
    
    ### **Phase 6: The Executive Governor (G5 GyroIntelligence Egress)**
    
    **Goal:** Implement the highest-level executive layer, enabling system self-governance.
    
    **Rationale:** G5 synthesizes observations and issues binding policy decisions to ensure system viability.
    
    - **Batch 6.1: Governance, Policy & Memory**
        - `gyro_si/g5_gyrointelligence_en/cs/g1_governance.py`
        - `gyro_si/g5_gyrointelligence_en/una/g2_governance.py`
        - `gyro_si/g5_gyrointelligence_en/ona/g3_governance.py`
        - `gyro_si/g5_gyrointelligence_en/bu_in/g4_governance.py`
        - `gyro_si/g5_gyrointelligence_en/bu_en/synthesis.py`
        - `gyro_si/g5_gyrointelligence_en/immunity_memory.py`
    - **Batch 6.2: Runner**
        - `gyro_si/g5_gyrointelligence_en/runner.py`
    
    **Milestone:** The full stack is self-governing; observed system issues propagate up, triggering policy-driven actions that cascade down to correction and adaptation.
    
    ---